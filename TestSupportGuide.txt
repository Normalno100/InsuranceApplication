# –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Ç–µ—Å—Ç–æ–≤ Travel Insurance

## üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ

1. [–í–≤–µ–¥–µ–Ω–∏–µ](#–≤–≤–µ–¥–µ–Ω–∏–µ)
2. [–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤](#—Å—Ç—Ä—É–∫—Ç—É—Ä–∞-—Ç–µ—Å—Ç–æ–≤)
3. [–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤](#–∑–∞–ø—É—Å–∫-—Ç–µ—Å—Ç–æ–≤)
4. [–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤](#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ-–Ω–æ–≤—ã—Ö-—Ç–µ—Å—Ç–æ–≤)
5. [–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤](#–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ-—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö-—Ç–µ—Å—Ç–æ–≤)
6. [Best Practices](#best-practices)
7. [Troubleshooting](#troubleshooting)
8. [Checklist –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º](#checklist-–ø–µ—Ä–µ–¥-–∫–æ–º–º–∏—Ç–æ–º)

---

## –í–≤–µ–¥–µ–Ω–∏–µ

–≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞.

### –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

- **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤**: 186
- **–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞**: ~100% –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
- **–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏**: JUnit 5, Mockito, Spring Boot Test
- **–°—Ç–∏–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏**: @Nested –≥—Ä—É–ø–ø—ã —Å @DisplayName

### –¶–µ–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

1. ‚úÖ –£–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
2. ‚úÖ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫–æ–¥–∞
3. ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
4. ‚úÖ –û–±–ª–µ–≥—á–∏—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥

---

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤

### –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º

```
src/test/java/org/javaguru/travel/insurance/
‚îú‚îÄ‚îÄ core/
‚îÇ   ‚îú‚îÄ‚îÄ DateTimeServiceTest.java                           (45 —Ç–µ—Å—Ç–æ–≤)
‚îÇ   ‚îú‚îÄ‚îÄ TravelCalculatePremiumRequestValidatorTest.java    (70 —Ç–µ—Å—Ç–æ–≤)
‚îÇ   ‚îî‚îÄ‚îÄ TravelCalculatePremiumServiceImplTest.java         (54 —Ç–µ—Å—Ç–∞)
‚îî‚îÄ‚îÄ rest/
    ‚îî‚îÄ‚îÄ TravelCalculatePremiumControllerTest.java          (17 —Ç–µ—Å—Ç–æ–≤)
```

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞

–ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:

```java
@DisplayName("–ò–º—è–ö–ª–∞—Å—Å–∞ Tests")
class –ò–º—è–ö–ª–∞—Å—Å–∞Test {

    // –ú–æ–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    @Mock
    private Dependency dependency;

    @InjectMocks
    private ClassUnderTest classUnderTest;

    // –ì—Ä—É–ø–ø–∞ 1: –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    @Nested
    @DisplayName("–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
    class GroupName {

        @BeforeEach
        void setUp() {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã
        }

        @Test
        @DisplayName("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞")
        void testMethod() {
            // Arrange
            // Act
            // Assert
        }
    }

    // –ì—Ä—É–ø–ø–∞ 2, 3, –∏ —Ç.–¥.

    // Helper –º–µ—Ç–æ–¥—ã
    private Object createValidObject() {
        // ...
    }
}
```

---

## –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤

### –ö–æ–º–∞–Ω–¥—ã Maven

#### –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
```bash
mvn test
```

#### –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å
```bash
mvn test -Dtest=DateTimeServiceTest
mvn test -Dtest=TravelCalculatePremiumServiceImplTest
```

#### –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≥—Ä—É–ø–ø—É —Ç–µ—Å—Ç–æ–≤
```bash
mvn test -Dtest=DateTimeServiceTest$LeapYearScenarios
mvn test -Dtest=TravelCalculatePremiumServiceImplTest$PriceCalculation
```

#### –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç
```bash
mvn test -Dtest=DateTimeServiceTest#shouldCalculateLeapYear
```

#### –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –æ—Ç—á–µ—Ç–æ–º –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
```bash
mvn clean test jacoco:report
```
–û—Ç—á–µ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ `target/site/jacoco/index.html`

### –ö–æ–º–∞–Ω–¥—ã –∏–∑ IDE

#### IntelliJ IDEA
- **–í—Å–µ —Ç–µ—Å—Ç—ã –∫–ª–∞—Å—Å–∞**: –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –Ω–∞ –∫–ª–∞—Å—Å–µ ‚Üí Run 'ClassNameTest'
- **–û–¥–Ω–∞ –≥—Ä—É–ø–ø–∞**: –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –Ω–∞ @Nested –∫–ª–∞—Å—Å–µ ‚Üí Run
- **–û–¥–∏–Ω —Ç–µ—Å—Ç**: –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –Ω–∞ –º–µ—Ç–æ–¥–µ ‚Üí Run
- **–° –ø–æ–∫—Ä—ã—Ç–∏–µ–º**: Run with Coverage

#### Eclipse
- –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –Ω–∞ —Ç–µ—Å—Ç–µ ‚Üí Run As ‚Üí JUnit Test

### CI/CD –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

```yaml
# –ü—Ä–∏–º–µ—Ä –¥–ª—è GitHub Actions
- name: Run tests
  run: mvn test

- name: Generate coverage report
  run: mvn jacoco:report

- name: Check coverage threshold
  run: mvn jacoco:check
```

---

## –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤

### –®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ—Å—Ç–∞

–ó–∞–¥–∞–π—Ç–µ —Å–µ–±–µ –≤–æ–ø—Ä–æ—Å—ã:
1. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è? (–º–µ—Ç–æ–¥, –≤–∞–ª–∏–¥–∞—Ü–∏—è, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)
2. –ö –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç–µ—Å—Ç? (happy path, validation, edge cases)
3. –≠—Ç–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∏–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π?

### –®–∞–≥ 2: –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≥—Ä—É–ø–ø—É

```java
@Nested
@DisplayName("–ü–æ–¥—Ö–æ–¥—è—â–∞—è –≥—Ä—É–ø–ø–∞")
class AppropriatGroup {
    // –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç —Å—é–¥–∞
}
```

–ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:

```java
@Nested
@DisplayName("–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤")
class NewCategory {

    @BeforeEach
    void setUp() {
        // –û–±—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã
    }

    @Test
    @DisplayName("–ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç –≤ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø–µ")
    void firstTest() {
        // ...
    }
}
```

### –®–∞–≥ 3: –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ—Å—Ç –ø–æ AAA –ø–∞—Ç—Ç–µ—Ä–Ω—É

```java
@Test
@DisplayName("Should calculate price for 15 days trip")
void shouldCalculatePriceFor15Days() {
    // Arrange - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    TravelCalculatePremiumRequest request = createValidRequest();
    when(dateTimeService.getDaysBetween(any(), any())).thenReturn(15L);

    // Act - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    TravelCalculatePremiumResponse response = service.calculatePremium(request);

    // Assert - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    assertEquals(new BigDecimal("15"), response.getAgreementPrice());
}
```

### –®–∞–≥ 4: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤

–í–º–µ—Å—Ç–æ:
```java
@Test
void shouldCalculateFor5Days() { /* ... */ }

@Test
void shouldCalculateFor10Days() { /* ... */ }

@Test
void shouldCalculateFor15Days() { /* ... */ }
```

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
```java
@ParameterizedTest
@CsvSource({"5, 5", "10, 10", "15, 15"})
@DisplayName("Should calculate correct price for various periods")
void shouldCalculateForVariousPeriods(long days, int expectedPrice) {
    when(dateTimeService.getDaysBetween(any(), any())).thenReturn(days);

    TravelCalculatePremiumResponse response = service.calculatePremium(request);

    assertEquals(new BigDecimal(expectedPrice), response.getAgreementPrice());
}
```

### –ü—Ä–∏–º–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º

#### 1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏

```java
@Nested
@DisplayName("PersonFirstName Validation")
class PersonFirstNameValidation {

    @Test
    @DisplayName("Should return error when firstName contains only digits")
    void shouldReturnErrorWhenFirstNameContainsOnlyDigits() {
        // Arrange
        TravelCalculatePremiumRequest request = validRequest();
        request.setPersonFirstName("12345");

        // Act
        List<ValidationError> errors = validator.validate(request);

        // Assert
        assertEquals(1, errors.size());
        assertEquals("personFirstName", errors.get(0).getField());
        assertEquals("Must contain letters!", errors.get(0).getMessage());
    }
}
```

#### 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Å–µ—Ä–≤–∏—Å–∞

```java
@Nested
@DisplayName("New Feature - Discount Calculation")
class DiscountCalculation {

    @BeforeEach
    void setUp() {
        when(requestValidator.validate(any())).thenReturn(Collections.emptyList());
    }

    @Test
    @DisplayName("Should apply 10% discount for trips over 30 days")
    void shouldApplyDiscountForLongTrips() {
        // Arrange
        TravelCalculatePremiumRequest request = createValidRequest();
        when(dateTimeService.getDaysBetween(any(), any())).thenReturn(35L);

        // Act
        TravelCalculatePremiumResponse response = service.calculatePremium(request);

        // Assert
        assertEquals(new BigDecimal("31.5"), response.getAgreementPrice()); // 35 * 0.9
    }
}
```

#### 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ endpoint

```java
@Test
@DisplayName("Should return list of all agreements")
void shouldReturnListOfAgreements() throws Exception {
    List<Agreement> agreements = List.of(
        new Agreement("John", "Smith", LocalDate.now(), LocalDate.now().plusDays(10))
    );
    when(agreementService.getAllAgreements()).thenReturn(agreements);

    mockMvc.perform(get("/insurance/travel/agreements"))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$").isArray())
            .andExpect(jsonPath("$[0].personFirstName").value("John"));
}
```

---

## –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤

### –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–µ—Å—Ç—ã?

1. **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏** ‚Üí –æ–±–Ω–æ–≤–∏—Ç–µ assertions
2. **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è** ‚Üí –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—è
3. **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏** ‚Üí –æ–±–Ω–æ–≤–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏
4. **–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞** ‚Üí —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç

### –°—Ü–µ–Ω–∞—Ä–∏–π 1: –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–ª–µ –≤ DTO

**–ë—ã–ª–æ:**
```java
public class TravelCalculatePremiumRequest {
    private String personFirstName;
    private String personLastName;
    private LocalDate agreementDateFrom;
    private LocalDate agreementDateTo;
}
```

**–°—Ç–∞–ª–æ:**
```java
public class TravelCalculatePremiumRequest {
    private String personFirstName;
    private String personLastName;
    private LocalDate agreementDateFrom;
    private LocalDate agreementDateTo;
    private String personBirthDate; // –ù–û–í–û–ï –ü–û–õ–ï
}
```

**–ß—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å:**

1. **Validator Test** - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:
```java
@Test
@DisplayName("Should return error when personBirthDate is null")
void shouldReturnErrorWhenPersonBirthDateIsNull() {
    TravelCalculatePremiumRequest request = validRequest();
    request.setPersonBirthDate(null);

    List<ValidationError> errors = validator.validate(request);

    assertEquals(1, errors.size());
    assertEquals("personBirthDate", errors.get(0).getField());
}
```

2. **Service Test** - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:
```java
@Test
@DisplayName("Should copy personBirthDate from request to response")
void shouldCopyPersonBirthDate() {
    TravelCalculatePremiumRequest request = createValidRequest();
    request.setPersonBirthDate("1990-01-01");

    TravelCalculatePremiumResponse response = service.calculatePremium(request);

    assertEquals(request.getPersonBirthDate(), response.getPersonBirthDate());
}
```

3. **Controller Test** - –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π:
```java
mockMvc.perform(post("/insurance/travel/calculate")
        .contentType(MediaType.APPLICATION_JSON)
        .content(objectMapper.writeValueAsString(request)))
    .andExpect(status().isOk())
    .andExpect(jsonPath("$.personBirthDate").exists()); // –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê
```

### –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ò–∑–º–µ–Ω–µ–Ω–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞

**–ë—ã–ª–æ:** 1 –¥–µ–Ω—å = 1 –µ–¥–∏–Ω–∏—Ü–∞ –≤–∞–ª—é—Ç—ã

**–°—Ç–∞–ª–æ:** 1 –¥–µ–Ω—å = 2 –µ–¥–∏–Ω–∏—Ü—ã –≤–∞–ª—é—Ç—ã

**–ß—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å:**

1. –û–±–Ω–æ–≤–∏—Ç–µ –≤—Å–µ assertions —Å —Ü–µ–Ω–æ–π:
```java
// –ë—ã–ª–æ
assertEquals(new BigDecimal("10"), response.getAgreementPrice());

// –°—Ç–∞–ª–æ
assertEquals(new BigDecimal("20"), response.getAgreementPrice());
```

2. –û–±–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:
```java
// –ë—ã–ª–æ
@CsvSource({"10, 10", "30, 30", "365, 365"})

// –°—Ç–∞–ª–æ
@CsvSource({"10, 20", "30, 60", "365, 730"})
```

3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç:
```bash
mvn test -Dtest=TravelCalculatePremiumServiceImplTest$PriceCalculation
```

### –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏

**–ë—ã–ª–æ:** "Must not be empty!"

**–°—Ç–∞–ª–æ:** "Field is required!"

**–ß—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å:**

```java
// –ë—ã–ª–æ
assertEquals("Must not be empty!", errors.get(0).getMessage());

// –°—Ç–∞–ª–æ
assertEquals("Field is required!", errors.get(0).getMessage());
```

**–°–æ–≤–µ—Ç**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö:
```java
public class ValidationMessages {
    public static final String FIELD_REQUIRED = "Field is required!";
}

// –í —Ç–µ—Å—Ç–∞—Ö:
assertEquals(ValidationMessages.FIELD_REQUIRED, errors.get(0).getMessage());
```

---

## Best Practices

### 1. –ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤

‚úÖ **–•–æ—Ä–æ—à–æ:**
```java
@Test
@DisplayName("Should return error when personFirstName is null")
void shouldReturnErrorWhenPersonFirstNameIsNull()
```

‚ùå **–ü–ª–æ—Ö–æ:**
```java
@Test
void test1()
```

### 2. –û–¥–∏–Ω —Ç–µ—Å—Ç = –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞

‚úÖ **–•–æ—Ä–æ—à–æ:**
```java
@Test
void shouldCopyPersonFirstName() {
    assertEquals(request.getPersonFirstName(), response.getPersonFirstName());
}

@Test
void shouldCopyPersonLastName() {
    assertEquals(request.getPersonLastName(), response.getPersonLastName());
}
```

‚ùå **–ü–ª–æ—Ö–æ:**
```java
@Test
void shouldCopyAllFieldsAndCalculatePriceAndValidateInput() {
    // –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –æ–¥–Ω–æ–º —Ç–µ—Å—Ç–µ
}
```

### 3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @BeforeEach –¥–ª—è –æ–±—â–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

‚úÖ **–•–æ—Ä–æ—à–æ:**
```java
@BeforeEach
void setUp() {
    when(requestValidator.validate(any())).thenReturn(Collections.emptyList());
    when(dateTimeService.getDaysBetween(any(), any())).thenReturn(10L);
}

@Test
void test1() {
    // –ú–æ–∫–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
}
```

‚ùå **–ü–ª–æ—Ö–æ:**
```java
@Test
void test1() {
    when(requestValidator.validate(any())).thenReturn(Collections.emptyList());
    when(dateTimeService.getDaysBetween(any(), any())).thenReturn(10L);
    // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–∞–∂–¥–æ–º —Ç–µ—Å—Ç–µ
}
```

### 4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã

‚úÖ **–•–æ—Ä–æ—à–æ:**
```java
@ParameterizedTest
@ValueSource(strings = {"John", "Jean-Pierre", "Mary Ann", "–ò–≤–∞–Ω"})
void shouldAcceptVariousNames(String name) {
    // –û–¥–∏–Ω —Ç–µ—Å—Ç, –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π
}
```

‚ùå **–ü–ª–æ—Ö–æ:**
```java
@Test void shouldAcceptJohn() { /* ... */ }
@Test void shouldAcceptJeanPierre() { /* ... */ }
@Test void shouldAcceptMaryAnn() { /* ... */ }
@Test void shouldAcceptIvan() { /* ... */ }
```

### 5. –ò–∑–æ–ª–∏—Ä—É–π—Ç–µ —Ç–µ—Å—Ç—ã

‚úÖ **–•–æ—Ä–æ—à–æ:**
```java
@Test
void test1() {
    TravelCalculatePremiumRequest request = createValidRequest();
    // –ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
}

@Test
void test2() {
    TravelCalculatePremiumRequest request = createValidRequest();
    // –ù–µ–∑–∞–≤–∏—Å–∏–º –æ—Ç test1
}
```

‚ùå **–ü–ª–æ—Ö–æ:**
```java
private TravelCalculatePremiumRequest sharedRequest; // –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@Test
void test1() {
    sharedRequest.setPersonFirstName("John");
}

@Test
void test2() {
    // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç test1!
}
```

### 6. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ assertAll –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫

‚úÖ **–•–æ—Ä–æ—à–æ:**
```java
@Test
void shouldCopyAllFields() {
    assertAll(
        () -> assertEquals(request.getPersonFirstName(), response.getPersonFirstName()),
        () -> assertEquals(request.getPersonLastName(), response.getPersonLastName()),
        () -> assertEquals(request.getAgreementDateFrom(), response.getAgreementDateFrom()),
        () -> assertEquals(request.getAgreementDateTo(), response.getAgreementDateTo())
    );
}
```

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –í–°–ï –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é.

### 7. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ helper –º–µ—Ç–æ–¥—ã

```java
private TravelCalculatePremiumRequest createValidRequest() {
    TravelCalculatePremiumRequest request = new TravelCalculatePremiumRequest();
    request.setPersonFirstName("John");
    request.setPersonLastName("Smith");
    request.setAgreementDateFrom(LocalDate.now());
    request.setAgreementDateTo(LocalDate.now().plusDays(10));
    return request;
}

private TravelCalculatePremiumRequest createRequestWithInvalidFirstName() {
    TravelCalculatePremiumRequest request = createValidRequest();
    request.setPersonFirstName(null);
    return request;
}
```

### 8. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ, –Ω–æ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏

```java
// –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π
@Test
void shouldCalculatePriceWhenValidationPasses() {
    // ...
    assertNotNull(response.getAgreementPrice());
}

// –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π
@Test
void shouldNotCalculatePriceWhenValidationFails() {
    // ...
    assertNull(response.getAgreementPrice());
    verify(dateTimeService, never()).getDaysBetween(any(), any());
}
```

### 9. –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Å—Ç—ã

```java
@Test
@DisplayName("Should apply leap year calculation correctly")
void shouldHandleLeapYear() {
    // Given: Feb 28 to March 1 in leap year 2024
    // When: calculating days between
    // Then: should return 2 days (includes Feb 29)

    LocalDate date1 = LocalDate.of(2024, 2, 28);
    LocalDate date2 = LocalDate.of(2024, 3, 1);

    long days = dateTimeService.getDaysBetween(date1, date2);

    assertEquals(2L, days);
}
```

### 10. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –º–∞–≥–∏—á–µ—Å–∫–∏—Ö —á–∏—Å–µ–ª

‚ùå **–ü–ª–æ—Ö–æ:**
```java
request.setAgreementDateTo(LocalDate.now().plusDays(10));
assertEquals(new BigDecimal("10"), response.getAgreementPrice());
```

‚úÖ **–•–æ—Ä–æ—à–æ:**
```java
private static final int STANDARD_TRIP_DAYS = 10;

request.setAgreementDateTo(LocalDate.now().plusDays(STANDARD_TRIP_DAYS));
assertEquals(new BigDecimal(String.valueOf(STANDARD_TRIP_DAYS)), response.getAgreementPrice());
```

---

## Troubleshooting

### –ü—Ä–æ–±–ª–µ–º–∞ 1: –¢–µ—Å—Ç –ø–∞–¥–∞–µ—Ç —Å NullPointerException

**–°–∏–º–ø—Ç–æ–º:**
```
java.lang.NullPointerException
    at TravelCalculatePremiumServiceImplTest.shouldCalculatePremium
```

**–ü—Ä–∏—á–∏–Ω–∞:** –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –º–æ–∫

**–†–µ—à–µ–Ω–∏–µ:**
```java
@BeforeEach
void setUp() {
    // –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –º–æ–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
    when(requestValidator.validate(any())).thenReturn(Collections.emptyList());
    when(dateTimeService.getDaysBetween(any(), any())).thenReturn(10L);
}
```

### –ü—Ä–æ–±–ª–µ–º–∞ 2: –¢–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –ø–∞–¥–∞–µ—Ç –≤ CI

**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `LocalDate.now()` - –¥–∞—Ç—ã –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
2. –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
3. –ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤

**–†–µ—à–µ–Ω–∏–µ:**
```java
// –í–º–µ—Å—Ç–æ
LocalDate date = LocalDate.now();

// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã
LocalDate date = LocalDate.of(2023, 1, 1);
```

### –ü—Ä–æ–±–ª–µ–º–∞ 3: Mockito –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–∑–æ–≤

**–°–∏–º–ø—Ç–æ–º:**
```
Wanted but not invoked:
dateTimeService.getDaysBetween(...)
```

**–ü—Ä–∏—á–∏–Ω–∞:** –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞—Ç—á–µ—Ä –∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤–º–µ—Å—Ç–æ –º–æ–∫–∞

**–†–µ—à–µ–Ω–∏–µ:**
```java
// –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è @Mock
@Mock
private DateTimeService dateTimeService;

// –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∞—Ç—á–µ—Ä—ã
verify(dateTimeService).getDaysBetween(any(LocalDate.class), any(LocalDate.class));
// –∏–ª–∏
verify(dateTimeService).getDaysBetween(eq(date1), eq(date2));
```

### –ü—Ä–æ–±–ª–µ–º–∞ 4: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è

**–ü—Ä–∏—á–∏–Ω–∞:** –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å junit-jupiter-params

**–†–µ—à–µ–Ω–∏–µ:**
```xml
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-params</artifactId>
    <scope>test</scope>
</dependency>
```

### –ü—Ä–æ–±–ª–µ–º–∞ 5: –¢–µ—Å—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 404

**–ü—Ä–∏—á–∏–Ω–∞:** –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç @WebMvcTest

**–†–µ—à–µ–Ω–∏–µ:**
```java
@WebMvcTest(TravelCalculatePremiumController.class)
class TravelCalculatePremiumControllerTest {

    @Test
    void test() throws Exception {
        // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL - –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å @RequestMapping
        mockMvc.perform(post("/insurance/travel/calculate") // –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
```

---

## Checklist –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º

### ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

- [ ] –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–æ–∫–∞–ª—å–Ω–æ (`mvn test`)
- [ ] –ù–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ
- [ ] –¢–µ—Å—Ç—ã –∏–º–µ—é—Ç –ø–æ–Ω—è—Ç–Ω—ã–µ `@DisplayName`
- [ ] –ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –≤ —Ç–µ—Å—Ç–∞—Ö
- [ ] –¢–µ—Å—Ç—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã
- [ ] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω AAA –ø–∞—Ç—Ç–µ—Ä–Ω (Arrange-Act-Assert)

### ‚úÖ –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ

- [ ] –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ –Ω–µ —É–ø–∞–ª–æ (`mvn jacoco:report`)
- [ ] –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ
- [ ] –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
- [ ] –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
- [ ] –ö–æ–¥-—Ä–µ–≤—å—é —Ç–µ—Å—Ç–æ–≤ –∫–æ–ª–ª–µ–≥–æ–π

### ‚úÖ Code Style

- [ ] –¢–µ—Å—Ç—ã –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã (Ctrl+Alt+L –≤ IDEA)
- [ ] –ù–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
- [ ] –ù–µ—Ç –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
- [ ] Helper –º–µ—Ç–æ–¥—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω–∏–∑—É –∫–ª–∞—Å—Å–∞

---

## –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–æ–≤

### –¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏

| –ú–µ—Ç—Ä–∏–∫–∞ | –¶–µ–ª—å | –¢–µ–∫—É—â–µ–µ |
|---------|------|---------|
| –ü–æ–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ | >80% | ~95% |
| –ü–æ–∫—Ä—ã—Ç–∏–µ –≤–µ—Ç–æ–∫ | >70% | ~90% |
| –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ | –†–∞—Å—Ç–µ—Ç —Å –∫–æ–¥–æ–º | 186 |
| –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ | <30 —Å–µ–∫ | ~15 —Å–µ–∫ |
| –ü—Ä–æ—Ü–µ–Ω—Ç –ø–∞–¥–∞—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤ | 0% | 0% |

### –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏

```bash
# –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
mvn clean test jacoco:report

# –û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç
open target/site/jacoco/index.html

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
mvn test | grep "Tests run"
```

---

## –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏

### –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
- [JUnit 5 User Guide](https://junit.org/junit5/docs/current/user-guide/)
- [Mockito Documentation](https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html)
- [Spring Boot Testing](https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.testing)
- [AssertJ Documentation](https://assertj.github.io/doc/)

### Best Practices
- [Test Pyramid](https://martinfowler.com/articles/practical-test-pyramid.html)
- [Given-When-Then](https://martinfowler.com/bliki/GivenWhenThen.html)
- [Test Naming Conventions](https://dzone.com/articles/7-popular-unit-test-naming)

---

## –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ—Å—Ç–∞–º:

1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç
2. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–∞—Ö
3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ Tech Lead –∫–æ–º–∞–Ω–¥—ã
4. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª–µ #testing –≤ Slack

---

**–í–µ—Ä—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:** 1.0
**–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** 12 –æ–∫—Ç—è–±—Ä—è 2025
**–ê–≤—Ç–æ—Ä:** Travel Insurance Dev Team